<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="CodeGen.Generators" #>
using Microsoft.CodeAnalysis;
using System;

namespace <#= Namespace #>
{
    <#= EnclosingClassDeclaration #> {
		public class <#= CommandName + "Builder" #><TSyntaxNode> : ICommandBuilder<<#= CommandName #><TSyntaxNode>, TSyntaxNode>
			where TSyntaxNode : TRootNode
		{
			<#foreach(var propDesc in Properties){#>
	public <#= propDesc.Type #> <#= propDesc.Name #> { get; set; }
		
			public <#= CommandName + "Builder" #><TSyntaxNode> With<#= propDesc.Name #>(<#= propDesc.Type #> value)
			{
			   <#= propDesc.Name #> = value;
			   return this;
			} 
			<#}#>

			public <#= CommandName #><TSyntaxNode> Build()
			{
			   return new <#= CommandName #><TSyntaxNode>(){<#foreach(var propDesc in Properties){#> <#= "\n\t\t\t\t" + propDesc.Name #> = <#= propDesc.Name #>, <#}#>};
			}
		}
	}
}

<#+ 
	public string CommandName{get; set;}

	public string EnclosingClassDeclaration { get; set; }

	public string Namespace {get; set;}

	public string TRoot {get; set;}

	public IEnumerable<PropertyDescription> Properties{get; set;}
#>